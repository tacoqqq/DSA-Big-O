1-1) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over"

// O(1) : No matter how many people are there in this room, the answer is provided (constant time) right after the question is tossed. It doesn't require further calculation or examination.

1-2) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask.

// O(n) : It's like looking for a matching number among an array of 15 numbers. We need to use a for loop and if statement to look for and determine if the number matches. The more numbers (elements) in the array, the longer time it takes to loop through. And there is a linear relationship between the scale of data entries and the computing time.

====================================================================================================================================

2) What is the Big O of the following algorithm? Explain your answer

function isEven(value) {
    if (value % 2 === 0) {
        return true;
    }
    else
        return false;
    }
}

// O(1) : The function only takes one parameter and determines whether it is divisible by 2. It only requires an one-time calculation.

====================================================================================================================================

3) Are you here?
What is the Big O of the following algorithm? Explain your answer

function areYouHere(arr1, arr2) {
    let ticks = 0
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}

// O(n^2): There are two arrays, each has n elements. This solution linearly loops through one array and the other nested array, which is a total of two loops, we get n*n = n^2 for the big O notation.

====================================================================================================================================

4) Doubler
What is the Big O of the following algorithm? Explain your answer

function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}

// O(n): There is only one array. The solution loops through the array and multiply each element by 2. If there ar 10 elements, it works 10 times; if there are 100 elements, it works 100 times. Ther is a linear relationship between the scale of data entries and the computing time.

====================================================================================================================================

5) Naive search
What is the Big O of the following algorithm? Explain your answer

function naiveSearch(array, item) {
    let ticks = 0;
    for (let i = 0; i < array.length; i++) {
        ticks++
        if (array[i] === item) {
            ticks++
            return `${i} + ${ticks}`;
        }
    }
}

// O(n): There is only one array. We need to use a for loop and if statement to look for and determine if the number matches. The more numbers (elements) in the array, the longer time it takes to loop through. And there is a linear relationship between the scale of data entries and the computing time.

====================================================================================================================================

6) Creating pairs:
What is the Big O of the following algorithm? Explain your answer

function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j]);
        }
    }


// O(n^2): The solution loops through the same array with n elements twice. Thus we get n*n = n^2 for the big O notation.

====================================================================================================================================

7) Compute the sequence
What does the following algorithm do? What is its runtime complexity? Explain your answer

function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i === 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
}

//O(n): This algorithm creates an array of elements, each element is the sum of the two elements in the front. It takes a number as the parameter. Bigger num represents more elements and thus requires more time to process. There is a linear relationship between the number provided and the computing time. 

====================================================================================================================================

8) An efficient search
In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the input array is always sorted. What is the Big O of the following algorithm? Explain your answer

function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}

// O(log n): This solution cuts the problem size in half each round during the while loop, and this is one of the characterists of logarithmic algorithum. Larger inputs require longer running time, but the running time increases slowly.

====================================================================================================================================

9) Random element
What is the Big O of the following algorithm? Explain your answer

function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

//O(1): No matter how long the input array is, the solution has only one task, which is to generate a random number, and use that random number as the index of the array. The solution takes the same amount of time to complete.

====================================================================================================================================

10) What Am I?
What does the following algorithm do? What is the Big O of the following algorithm? Explain your answer

function isWhat(n) {
    if (n < 2 || n % 1 !== 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i === 0) return false;
    }
    return true;
}

// O(n): This algorithm tests if n is a prime nubmer(a number that is only divisible by 1 and itself). It has to loop through all the numbers less than the given number to see if it qualifies the definition of a prime number, so the bigger the prime number, the longer running time this alogrithm needs to process.

====================================================================================================================================

11) Tower of Hanoi
The Tower of Hanoi is a very famous mathematical puzzle (some call it game!). This is how it goes:

There are three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk at the top (making a conical shape). The other two rods are empty to begin with.
The goal of the puzzle is to move the entire stack of rods to another rod (can't be the original rod where it was stacked before) where it will be stacked in the ascending order as well. This should be done obeying the following rules: i) Only one disk may be moved at a time ii) Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod. iii) A larger disk may not placed on top of a smaller disk
Input:

Rod A	        Rod B	        Rod C
----		
---------		
-------------	
	
Output:

Rod A	        Rod B	        Rod C
                                ----
                                ---------
                                -------------
Derive an algorithm to solve the Tower of Hanoi puzzle.
Implement your algorithm using recursion. Your program should display each movement of the disk from one rod to another.
If you are given 5 disks, how do the rods look like after 7 recursive calls?
How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?  7 / 15 / 31 / 63 / 145
What is the runtime of your algorithm? --> O(2^n)

const hanoi = function(disc,src,aux,des){
    if (disc == 1){
        tasks++
        console.log(`move ${src} to ${des}`)
    } else {
        tasks++
        hanoi(disc-1, src, des, aux)
        console.log(`move ${src} to ${des}`)
        hanoi(disc-1, aux, src, des)
    }

    return tasks
}

let tasks = 0

hanoi(6,'A','B','C')


====================================================================================================================================

12) Iterative version
Solve the drills 1 - 7 from your previous checkpoint (Recursion) iteratively.

https://github.com/tacoqqq/DSA-recursion/blob/master/recursion-practice.js

====================================================================================================================================

13) Recursive Big O
Take your solutions from the recursive exercises that you completed in the previous checkpoint and identify the time complexities (big O) of each of them.

====================================================================================================================================

14) Iterative Big O
Take your solutions from the iterative exercises today and identify the time complexities (big O) of each of them.